<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = create('App\Thread');
    }

    /**
     * @test
     */
    public function a_user_can_view_all_threads()
    {
        $this->get('/threads')->assertSee($this->thread->title);
    }

    /**
     * @test
     */
    public function a_user_can_read_a_single_thread()
    {
        $this->get($this->thread->path())->assertSee($this->thread->title);
    }

    /**
     * @test
     */
    public function a_user_can_read_replies_that_are_associated_with_a_thread()
    {
        $reply = create('App\Reply',['thread_id' => $this->thread->id]);
        $this->get($this->thread->path())
            ->assertSee($reply->body);
    }

    /**
     * @test
     */
    public function a_user_can_filter_threads_according_to_a_channel()
    {
        $channel = create('App\Channel');
        $threadInChannel = create('App\Thread',['channel_id'=>$channel->id]);
        $threadNotInChannel = create('App\Thread');

        $this->get('/threads/'.$channel->slug)->assertSee($threadInChannel->title)->assertDontSee($threadNotInChannel->title);
    }

    /**
     * @test
     */

    public function a_user_can_filter_by_any_user_name()
    {
        $this->signIn(create('App\User',['name'=>'NoNo1']));

        $threadByNoNo1 = create('App\Thread',['user_id'=>auth()->id()]);
        $threadNotByNoNo1 = create('App\Thread');

        $this->get('threads?by=NoNo1')->assertSee($threadByNoNo1->title)->assertDontSee($threadNotByNoNo1->title);
    }

    /**
     * @test
     */
        public function a_user_can_filter_threads_by_popularity()
        {
            //Given we have three threads

            $threadWithTwoReplies = create('App\Thread');
            create('App\Reply',['thread_id'=>$threadWithTwoReplies->id],2);

            $threadWithThreeReplies = create('App\Thread');
            create('App\Reply',['thread_id'=>$threadWithThreeReplies->id],3);

            $threadWithNoreplies = $this->thread;

            $response = $this->getJson('threads?popularity=1')->json();
            //with 2 replies,3replies,0replies,respectively

            $this->assertEquals([3,2,0],array_column($response,'replies_count'));
        }



}
